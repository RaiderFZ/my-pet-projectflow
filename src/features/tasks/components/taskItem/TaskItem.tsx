import { FC } from "react";
import { Task } from "../../types";
import { format, isValid } from "date-fns";

interface TaskItemProps {
    task: Task;
    onEdit: (id: number) => void;
    onDelete: (id: number) => void;
    onStatusChange: (id: number, newStatus: Task['status']) => void;
}

const TaskItem: FC<TaskItemProps> = ({task, onEdit, onDelete, onStatusChange}) => {
    return (
        <div>
            <h3>{task.title}</h3>
            <p>{task.description}</p>
            <p>
                <span>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span> {task.priority} | <span>–°—Ç–∞—Ç—É—Å:</span> {task.status}
            </p>
            <p>
                <span>–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</span> 
                {
                    task.dueData 
                        ? isValid(new Date(task.dueData))
                            ? format(new Date(task.dueData), "dd.MM.yyyy")
                            : "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                        : "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                }
            </p>
            <div>
                <button
                    onClick={() => onEdit(task.id)}
                >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button
                    onClick={() => onDelete(task.id)}
                >
                    üóë –£–¥–∞–ª–∏—Ç—å
                </button>
                {task.status !== "done" && (
                    <button onClick={() => onStatusChange(task.id, "done")}>‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ</button> 
                )}
                {task.status !== "in-progress" && task.status !== "done" && (
                    <button onClick={() => onStatusChange(task.id, "in-progress")}>
                        üöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                    </button>
                )}
                {task.status !== "todo" && (
                    <button onClick={() => onStatusChange(task.id, "todo")}>‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</button>
                )}
            </div>
        </div>
)}

export default TaskItem;